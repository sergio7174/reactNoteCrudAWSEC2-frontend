{"ast":null,"code":"export const handleDeletePost = async (postId, posts, post, user, setPosts) => {\n  const postToEdit = posts.find(post => post._id === postId);\n  if ((user === null || user === void 0 ? void 0 : user._id) === (postToEdit === null || postToEdit === void 0 ? void 0 : postToEdit.user._id)) {\n    try {\n      //const response = await fetch(`http://localhost:3500/posts/${postId}`, {\n      alert('process.env.REACT_API_SERVER_URL}/users/login: ' + `${process.env.REACT_APP_API_SERVER_URL}/users/login`);\n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_URL}/posts/${postId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      console.log(data);\n      if (response.ok) {\n        setPosts(posts.filter(post => post._id !== postId));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  } else {\n    alert('You can only delete posts that you created.');\n  }\n};","map":{"version":3,"names":["handleDeletePost","postId","posts","post","user","setPosts","postToEdit","find","_id","alert","process","env","REACT_APP_API_SERVER_URL","response","fetch","method","headers","Authorization","localStorage","getItem","data","json","console","log","ok","filter","error"],"sources":["E:/REACT-DOCKER-SEP2024/MERN TO AWS/EC2/REACT NOTE CRUD/reactNoteCrudAWSEC2-frontend/src/services/Home/serviceHandleDeletePost.ts"],"sourcesContent":["import { IPost } from '../../interface/IPost';\n\nexport const handleDeletePost = async (\n  postId: string,\n  posts: IPost[],\n  post: IPost,\n  user: any,\n  setPosts: any,\n) => {\n  const postToEdit = posts.find((post: IPost) => post._id === postId);\n  if (user?._id === postToEdit?.user._id) {\n    try {\n      //const response = await fetch(`http://localhost:3500/posts/${postId}`, {\n        alert(\n          'process.env.REACT_API_SERVER_URL}/users/login: ' +\n            `${process.env.REACT_APP_API_SERVER_URL}/users/login`,\n        );  \n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_URL}/posts/${postId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      const data = await response.json();\n      console.log(data);\n      if (response.ok) {\n        setPosts(posts.filter((post) => post._id !== postId));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  } else {\n    alert('You can only delete posts that you created.');\n  }\n};\n"],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAG,MAAAA,CAC9BC,MAAc,EACdC,KAAc,EACdC,IAAW,EACXC,IAAS,EACTC,QAAa,KACV;EACH,MAAMC,UAAU,GAAGJ,KAAK,CAACK,IAAI,CAAEJ,IAAW,IAAKA,IAAI,CAACK,GAAG,KAAKP,MAAM,CAAC;EACnE,IAAI,CAAAG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,GAAG,OAAKF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEF,IAAI,CAACI,GAAG,GAAE;IACtC,IAAI;MACF;MACEC,KAAK,CACH,iDAAiD,GAC9C,GAAEC,OAAO,CAACC,GAAG,CAACC,wBAAyB,cAC5C,CAAC;MACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAO,CAACC,GAAG,CAACC,wBAAyB,UAASX,MAAO,EAAC,EAAE;QACtFc,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;QACzD;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,IAAIP,QAAQ,CAACW,EAAE,EAAE;QACfnB,QAAQ,CAACH,KAAK,CAACuB,MAAM,CAAEtB,IAAI,IAAKA,IAAI,CAACK,GAAG,KAAKP,MAAM,CAAC,CAAC;MACvD;IACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACpB;EACF,CAAC,MAAM;IACLjB,KAAK,CAAC,6CAA6C,CAAC;EACtD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}